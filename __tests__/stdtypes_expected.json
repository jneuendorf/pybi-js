{
  "bytearray": [
    [],
    {
      "__error__": {
        "type": "TypeError",
        "message": "string argument without an encoding"
      }
    },
    [
      195,
      164,
      115,
      100,
      102
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      1,
      5,
      10
    ],
    {
      "__error__": {
        "type": "TypeError",
        "message": "'str' object cannot be interpreted as an integer"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "byte must be in range(0, 256)"
      }
    }
  ],
  "bytes": [
    [],
    {
      "__error__": {
        "type": "TypeError",
        "message": "string argument without an encoding"
      }
    },
    [
      195,
      164,
      115,
      100,
      102
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      1,
      5,
      10
    ],
    {
      "__error__": {
        "type": "TypeError",
        "message": "'str' object cannot be interpreted as an integer"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "bytes must be in range(0, 256)"
      }
    }
  ],
  "dict": [
    {},
    {},
    {
      "__error__": {
        "type": "TypeError",
        "message": "dict expected at most 1 argument, got 2"
      }
    },
    {
      "a": 1,
      "b": 2
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "cannot convert dictionary update sequence element #0 to a sequence"
      }
    },
    {},
    {
      "a": 1,
      "b": 2
    },
    {},
    {
      "__error__": {
        "type": "ValueError",
        "message": "dictionary update sequence element #0 has length 1; 2 is required"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "'int' object is not iterable"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "dict expected at most 1 argument, got 2"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "'NoneType' object is not iterable"
      }
    }
  ],
  "float": [
    0.0,
    0.0,
    10.0,
    1.5,
    1.0,
    1.0,
    -1.0,
    1.0,
    1.5,
    1.5,
    1.5,
    -1.5,
    1.5,
    {
      "__error__": {
        "type": "ValueError",
        "message": "could not convert string to float: '1.5a'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "could not convert string to float: 'asdf'"
      }
    },
    "nan",
    "nan",
    "nan",
    "inf",
    "inf",
    "inf",
    "inf",
    "inf",
    "inf",
    "-inf",
    "-inf",
    "-inf",
    "-inf",
    "-inf",
    "-inf",
    {
      "__error__": {
        "type": "TypeError",
        "message": "float() argument must be a string or a number, not 'NoneType'"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "float() argument must be a string or a number, not 'list'"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "float() argument must be a string or a number, not 'dict'"
      }
    }
  ],
  "int": [
    0,
    0,
    10,
    1,
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() can't convert non-string with explicit base"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() can't convert non-string with explicit base"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "int() base must be >= 2 and <= 36, or 0"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "int() base must be >= 2 and <= 36, or 0"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "int() base must be >= 2 and <= 36, or 0"
      }
    },
    1,
    1,
    1,
    -1,
    1,
    1,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '1a'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '1.5a'"
      }
    },
    10,
    -10,
    10,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 0: '010'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 0: '-010'"
      }
    },
    2,
    8,
    16,
    16,
    16,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '0x010'"
      }
    },
    -16,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 8: '-0x010'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 2: '-0x010'"
      }
    },
    -16,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-0x010'"
      }
    },
    16,
    16,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '0X010'"
      }
    },
    -16,
    -16,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-0X010'"
      }
    },
    2,
    2,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '0b010'"
      }
    },
    -2,
    -2,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-0b010'"
      }
    },
    2,
    2,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '0B010'"
      }
    },
    -2,
    -2,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-0B010'"
      }
    },
    8,
    8,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '0o010'"
      }
    },
    -8,
    -8,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-0o010'"
      }
    },
    8,
    8,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '0O010'"
      }
    },
    -8,
    -8,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-0O010'"
      }
    },
    11534897,
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: 'asdf'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: 'nan'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: 'inf'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: 'infinity'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-inf'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '-infinity'"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() argument must be a string, a bytes-like object or a number, not 'NoneType'"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() argument must be a string, a bytes-like object or a number, not 'list'"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() argument must be a string, a bytes-like object or a number, not 'dict'"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() takes at most 2 arguments (3 given)"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "int() argument must be a string, a bytes-like object or a number, not 'dict'"
      }
    },
    {
      "__error__": {
        "type": "ValueError",
        "message": "invalid literal for int() with base 10: '  '"
      }
    }
  ],
  "list": [
    [],
    [],
    [
      1,
      2,
      3
    ],
    [
      "a",
      "s",
      "d",
      "f"
    ],
    [
      "a",
      "s",
      "d",
      "f"
    ],
    [
      "a",
      "b"
    ],
    {
      "__error__": {
        "type": "TypeError",
        "message": "list expected at most 1 argument, got 2"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "'NoneType' object is not iterable"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "'int' object is not iterable"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "list expected at most 1 argument, got 2"
      }
    }
  ],
  "range": [
    [
      0,
      1,
      2,
      3,
      4
    ],
    [],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    [
      1,
      3,
      5,
      7,
      9
    ],
    [],
    [],
    [],
    [
      -1,
      -4,
      -7
    ],
    [
      -10,
      -9,
      -8,
      -7,
      -6,
      -5,
      -4,
      -3,
      -2
    ],
    [
      -10,
      -8,
      -6,
      -4,
      -2
    ],
    [],
    {
      "__error__": {
        "type": "ValueError",
        "message": "range() arg 3 must not be zero"
      }
    }
  ],
  "set": [
    [],
    [],
    [
      1,
      2,
      3
    ],
    [
      "s",
      "f",
      "d",
      "a"
    ],
    [
      "s",
      "f",
      "d",
      "a"
    ],
    [
      "s",
      "f",
      "d",
      "a"
    ],
    [
      "b",
      "a"
    ],
    {
      "__error__": {
        "type": "TypeError",
        "message": "set expected at most 1 argument, got 2"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "'NoneType' object is not iterable"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "'int' object is not iterable"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "set expected at most 1 argument, got 2"
      }
    }
  ],
  "str": [
    "",
    "1",
    {
      "__error__": {
        "type": "TypeError",
        "message": "str() argument 2 must be str, not int"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "str() argument 2 must be str, not int"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "str() argument 3 must be str, not int"
      }
    },
    "[['1'], ['2', 3]]",
    {
      "__error__": {
        "type": "TypeError",
        "message": "decoding to str: need a bytes-like object, list found"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "str() takes at most 3 arguments (4 given)"
      }
    },
    "None",
    "True",
    "False",
    "",
    "asdf",
    {
      "__error__": {
        "type": "TypeError",
        "message": "decoding str is not supported"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "decoding to str: need a bytes-like object, int found"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "decoding str is not supported"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "str() argument 2 must be str, not None"
      }
    },
    {
      "__error__": {
        "type": "TypeError",
        "message": "str() argument 2 must be str, not int"
      }
    },
    "[]",
    "['a', 'b']",
    "{}",
    "{'a': 1}"
  ]
}